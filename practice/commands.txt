Getting & Creating Projects
	git init	Initialize a local Git repository
	git clone ssh://git@github.com/[username]/[repository-name].git	Create a local copy of a remote repository using url of which we wnt to clone.clone respository into a new directory.
Basic Snapshotting
	git config --global user.name "raj"
	git config --global user.email "rajkandolia307@gmail.com"
	git status	Check status.it will show you the status of file whether it is  added or not.
	git add [file-name.txt]	Add a file to the staging area
	git add -A	Add all new and changed files to the staging area
	git commit -m "[commit message]"	Commit changes
	git rm -r [file-name.txt]	Remove a file (or folder)
Branching & Merging
	Command	Description
	git branch:list all the local branches in the currernt repository.List branches (the asterisk denotes the current branch)
	git branch -a	List all branches (local and remote)
	git branch [branch name]	Create a new branch
	git branch -d [branch name]	Delete a branch
	git branch -D[branch name]:If you are sure you want to delete it is ask permission to write capital D.
	git push origin --delete [branch name]	Delete a remote branch
	git checkout -b [branch name]	Create a new branch and switch to it
	git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
	git branch -m [old branch name] [new branch name]	Rename a local branch
	git checkout [branch name]	Switch to a branch
	git checkout -	Switch to the branch last checked out
	git checkout -- [file-name.txt]	Discard changes to a file
	git merge [branch name]	Merge a branch into the active branch
	git merge [source branch] [target branch]	Merge a branch into a target branch
	git reset [commitid]:this command undoes all the chnages and preserve the changes locally.
	git rm [file.txt]:this command deletes the file from the current directory.
	git revert: deletes the files
	git revert --abort:retrieves deleted files
	git stash	Stash changes in a dirty working directory
	git stash clear	Remove all stashed entries
Sharing & Updating Projects
	git push origin [branch name]	Push a branch to your remote repository.this is stage where you can push your folder online or not.
	git push -u origin [branch name]	Push changes to remote repository (and remember the branch)
	git push	Push changes to remote repository (remembered branch)
	git push origin --delete [branch name]	Delete a remote branch
	git pull	Update local repository to the newest commit
	git pull origin [branch name]	Pull changes from remote repository
	git remote -v shows the current origin
	git remote add origin ssh://git@github.com/[username]/[repository-name].git	Add a remote repository
	git remote set-url origin ssh://git@github.com/[username]/[repository-name].git	Set a repository's origin branch to SSH
Inspection & Comparison
	git log	: shows the history list of current branch.View changes
	git log --summaryView changes (detailed)
	git log --oneline:View changes (briefly)
	git log -follow[filename]:this command list the history of specific file with thier renameing also.
	git log --graph:operation history performed
	git diff [source branch] [target branch]	Preview changes before merging
	git diff [commitid1] [commitid2]:this shows the difference between two commit id with the change in file content
	git diff HEAD :it shows the difference between current commit and latest changes in file content.  
	git diff HEAD:[filename.txt][filename.txt] :show the diffrence between two files
	git diff --color-words [commitid1] [commitid]:this shows the content changed from first commit id with second commit id using white and green color respectively and if we reverse the commit it it shows what we hve deleted in red color with repects to our commit id

Untracked - This file exists locally, but isn’t a part of the Git repository. The file’s change history will not be recorded and it will not be pushed to remote copies of your repository when you run git push. Unless they’ve been added to an ignore list, untracked files will show up when viewing your Git status.
Tracked - Git tracks the file’s change history and it will be pushed to remote copies when running git push. These files will show up in your Git status report if there are differences between the version on your hard drive and the last committed version.
Unstaged changes exist in your working directory, but Git hasn’t recorded them into its version history yet. You’ll usually want to stage them (mark them to become part of your next commit) or discard them by restoring the last committed version of the file.
Staged changes are a lot like unstaged changes, except that they’ve been marked to be committed the next time you run git commit. Upon your next commit, your staged changes become part of your Git history. git status will no longer list them as changes since they’re part of your last commit now.
